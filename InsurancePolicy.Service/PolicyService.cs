using InsurancePolicy.DAO;
using InsurancePolicy.Entities;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace InsurancePolicy.Service
{
    /// <summary>
    /// This class works as a wrapper to encapsulate all operations regarding policy.
    /// </summary>
    public class PolicyService
    {
        PolicyInfoRepository infoRepository;
        UserInterestRepository userInterestRepository;
        CounterRepository counterRepository;
        PolicyInterestRepository interestRepository;

        public PolicyService()
        {
            
        }

        /// <summary>
        /// This method is used to Add a policy details in all the respective databases.
        /// </summary>
        /// <param name="providerName">Policy Provider Name</param>
        /// <param name="policy">Policy Object</param>
        /// <returns>Task</returns>
        public async Task AddPolicy(string providerName,Policy policy)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// This method is used to show an interest in a policy.
        /// </summary>
        /// <param name="providerName">Policy Provider Name</param>
        /// <param name="policyName">Policy Name</param>
        /// <param name="emailId">Email id of the User</param>
        public void AddInterest(string providerName, string policyName, string emailId)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// This method is used to fetch total number of interests shown for a policy.
        /// </summary>
        /// <param name="policyName">Name of the Policy</param>
        /// <returns>Number of Interests or null</returns>
        public int? GetNumberOfInterestsForAPolicy(string policyName)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// This method is used to fetch the list of users who shown interest in a policy.
        /// </summary>
        /// <param name="policyName">Name of the Policy</param>
        /// <returns>List of Email id's of the User</returns>
        public List<string> GetInterestedUser(string policyName)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// This method is used to Retreive all interests info shown in a policy.
        /// </summary>
        /// <param name="policyName">Name of the Policy</param>
        /// <returns>List of Interests Info</returns>
        public List<InterestInfo> GetInterests(string policyName)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// This method is used to fetch all the policies added by a provider.
        /// </summary>
        /// <param name="providerName">Name of the Provider</param>
        /// <returns>List of the Policy</returns>
        public List<Policy> GetPolicies(string providerName)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// This method will be used to clean all the data generated by Test cases.
        /// Don't Change this method
        /// </summary>
        /// <param name="policyName">Policy Name as Key for Redis</param>
        public void Clean(string policyName)
        {
            infoRepository.Clean();
            userInterestRepository.Clean();
            interestRepository.Clean();
            counterRepository.Clean(policyName);
        }
    }
}
